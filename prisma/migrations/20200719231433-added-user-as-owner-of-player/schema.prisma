datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id   String @default(cuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name String
  credits Int @default(0)
  tournaments Tournament[]
  players Player[]
}

model Tournament {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user User? @relation(fields: [userId], references: [id])
  userId String?
  title String
  subtitle String
  comments String
  game String
  segments Segment[]
  chips Chip[]
  costs Cost[]
  timer Timer?
  payoutLevels PayoutLevel[]
}

model Segment {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  duration Int
  sBlind Int
  bBlind Int
  ante Int
  game String
  }

model Chip {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  denom Int
  color String
  rimColor String
  textColor String
  qtyAvailable Int
}

model Cost {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  costType String
  price Int
  chipStack Int
  buys Buy[]
}

model Buy {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cost Cost @relation(fields: [costId], references: [id])
  costId String
  player Player? @relation(fields: [playerId], references: [id])
  playerId String?
}

model Player {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId String
  name String?
  buys Buy[]
}

model Timer {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  active Boolean
  elapsed Int
  oneMinuteRemainingSpeech String
  playOneMinuteRemainingSound Boolean
  endOfRoundSpeech String
  playEndOfRoundSound Boolean
  backgroundColor String
}

model PayoutLevel {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  levelNumber Int
  payCount Int
  playerCount Int
}