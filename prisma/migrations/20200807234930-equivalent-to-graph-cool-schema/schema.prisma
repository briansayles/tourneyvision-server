datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authProvider AuthProvider?
  name String @default("")
  credits Int? @default(0)
  tournaments Tournament[]
  players Player[]
  contacts Contact[]
}
model Contact {
  id String @default(cuid()) @id
  name String @default("")
  phones String[]
  emails String[]
  user User @relation(fields: [userId], references: [id])
  userId String
}

model AuthProvider {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId String
  auth0 Auth0?
}

model Auth0 {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  authProvider AuthProvider @relation(fields: [authProviderId], references: [id])
  authProviderId String
  idToken String?
}

model Tournament {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String @default("")
  subtitle String?
  comments String?
  segments Segment[]
  chips Chip[]
  costs Cost[]
  timer Timer?
  payoutLevels PayoutLevel[]
  childrenUpdatedAt DateTime?
  game Game @default(NLHE)
  tables Table[]
  tags Tag[]
}

model Table {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @default("1")
  seats Seat[]
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}

model Seat  {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  number Int @default(1)
  player Player @relation(fields: [playerId], references: [id])
  playerId String
  table Table @relation(fields: [tableId], references: [id])
  tableId String
}

model Tag {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @default("")
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}


model Segment {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  duration Int @default(20)
  sBlind Int?
  bBlind Int?
  ante Int?
  game Game @default(NLHE)
}

model Chip {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  denom Int @default(100)
  color String @default("#fff")
  rimColor String?
  textColor String?
  qtyAvailable Int?
}

model Cost {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  costType CostType @default(Buyin)
  price Int @default(20)
  chipStack Int @default(1000)
  buys Buy[]
}

model Buy {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cost Cost @relation(fields: [costId], references: [id])
  costId String
  player Player? @relation(fields: [playerId], references: [id])
  playerId String?
}

model Player {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  name String?
  buys Buy[]
  seat Seat?
  tournaments Tournament[]
}

model Timer {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  active Boolean @default(false)
  elapsed Int @default(0)
  oneMinuteRemainingSpeech String?
  playOneMinuteRemainingSound Boolean @default(true)
  endOfRoundSpeech String?
  playEndOfRoundSound Boolean @default(true)
  backgroundColor String?
}

model PayoutLevel {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  levelNumber Int
  payCount Int
  playerCount Int
}

model Time {
  id String @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastRequestedAt DateTime
}

enum Game {
  NLHE
  PLO
  LHE
  L7S
  HORSE
  HOSE
  CAP
}

enum CostType {
  Buyin
  Rebuy
  Addon
  Bounty
  House
  Charity
}